From 6c0da9140608b9cf4f2b695644b0d92bd284ff12 Mon Sep 17 00:00:00 2001
From: Daniele Di Proietto <diproiettod@vmware.com>
Date: Tue, 9 Aug 2016 17:01:15 +0100
Subject: [PATCH 1/3] vswitchd: Introduce 'mtu_request' column in Interface.

The 'mtu_request' column can be used to set the MTU of a specific
interface.

This column is useful because it will allow changing the MTU of DPDK
devices (implemented in a future commit), which are not accessible
outside the ovs-vswitchd process, but it can be used for kernel
interfaces as well.

The current implementation of set_mtu() in netdev-dpdk is removed
because it's broken.  It will be reintroduced by a subsequent commit on
this series.

Signed-off-by: Daniele Di Proietto <diproiettod@vmware.com>
Acked-by: Ilya Maximets <i.maximets@samsung.com>
---
 lib/netdev-dpdk.c          | 51 +-------------------------
 vswitchd/bridge.c          |  9 +++++
 vswitchd/vswitch.ovsschema | 10 ++++-
 vswitchd/vswitch.xml       | 91 +++++++++++++++++++++++++++++++++++++++-------
 4 files changed, 96 insertions(+), 65 deletions(-)

diff --git a/lib/netdev-dpdk.c b/lib/netdev-dpdk.c
index 58d2f8e..fe7a27d 100644
--- a/lib/netdev-dpdk.c
+++ b/lib/netdev-dpdk.c
@@ -1329,54 +1329,7 @@ netdev_dpdk_get_mtu(const struct netdev *netdev, int *mtup)
 }
 
 static int
-netdev_dpdk_set_mtu(const struct netdev *netdev, int mtu)
-{
-    struct netdev_dpdk *dev = netdev_dpdk_cast(netdev);
-    int old_mtu, err;
-    struct dpdk_mp *old_mp;
-    struct dpdk_mp *mp;
-
-    ovs_mutex_lock(&dpdk_mutex);
-    ovs_mutex_lock(&dev->mutex);
-    if (dev->mtu == mtu) {
-        err = 0;
-        goto out;
-    }
-
-    mp = dpdk_mp_get(dev->socket_id, dev->mtu);
-    if (!mp) {
-        err = ENOMEM;
-        goto out;
-    }
-
-    rte_eth_dev_stop(dev->port_id);
-
-    old_mtu = dev->mtu;
-    old_mp = dev->dpdk_mp;
-    dev->dpdk_mp = mp;
-    dev->mtu = mtu;
-    dev->max_packet_len = MTU_TO_MAX_LEN(dev->mtu);
-
-    err = dpdk_eth_dev_init(dev);
-    if (err) {
-        dpdk_mp_put(mp);
-        dev->mtu = old_mtu;
-        dev->dpdk_mp = old_mp;
-        dev->max_packet_len = MTU_TO_MAX_LEN(dev->mtu);
-        dpdk_eth_dev_init(dev);
-        goto out;
-    }
-
-    dpdk_mp_put(old_mp);
-    netdev_change_seq_changed(netdev);
-out:
-    ovs_mutex_unlock(&dev->mutex);
-    ovs_mutex_unlock(&dpdk_mutex);
-    return err;
-}
-
-static int
-netdev_dpdk_get_carrier(const struct netdev *netdev_, bool *carrier);
+netdev_dpdk_get_carrier(const struct netdev *netdev, bool *carrier);
 
 static int
 netdev_dpdk_vhost_get_stats(const struct netdev *netdev,
@@ -2198,7 +2151,7 @@ unlock_dpdk:
     netdev_dpdk_set_etheraddr,                                \
     netdev_dpdk_get_etheraddr,                                \
     netdev_dpdk_get_mtu,                                      \
-    netdev_dpdk_set_mtu,                                      \
+    NULL,                       /* set_mtu */                 \
     netdev_dpdk_get_ifindex,                                  \
     GET_CARRIER,                                              \
     netdev_dpdk_get_carrier_resets,                           \
diff --git a/vswitchd/bridge.c b/vswitchd/bridge.c
index 591ecd2..57c8648 100644
--- a/vswitchd/bridge.c
+++ b/vswitchd/bridge.c
@@ -812,6 +812,15 @@ bridge_delete_or_reconfigure_ports(struct bridge *br)
             goto delete;
         }
 
+        if (iface->cfg->n_mtu_request == 1
+            && strcmp(iface->type,
+                      ofproto_port_open_type(br->type, "internal"))) {
+            /* Try to set the MTU to the requested value.  This is not done
+             * for internal interfaces, since their MTU is decided by the
+             * ofproto module, based on other ports in the bridge. */
+            netdev_set_mtu(iface->netdev, *iface->cfg->mtu_request);
+        }
+
         /* If the requested OpenFlow port for 'iface' changed, and it's not
          * already the correct port, then we might want to temporarily delete
          * this interface, so we can add it back again with the new OpenFlow
diff --git a/vswitchd/vswitch.ovsschema b/vswitchd/vswitch.ovsschema
index 35f145f..016a6b1 100644
--- a/vswitchd/vswitch.ovsschema
+++ b/vswitchd/vswitch.ovsschema
@@ -1,6 +1,6 @@
 {"name": "Open_vSwitch",
- "version": "7.12.1",
- "cksum": "2211824403 22535",
+ "version": "7.12.2",
+ "cksum": "763228073 22697",
  "tables": {
    "Open_vSwitch": {
      "columns": {
@@ -320,6 +320,12 @@
        "mtu": {
          "type": {"key": "integer", "min": 0, "max": 1},
          "ephemeral": true},
+       "mtu_request": {
+         "type": {
+           "key": {"type": "integer",
+                   "minInteger": 1},
+           "min": 0,
+           "max": 1}},
        "error": {
          "type": {"key": "string", "min": 0, "max": 1}}},
      "indexes": [["name"]]},
diff --git a/vswitchd/vswitch.xml b/vswitchd/vswitch.xml
index 26c1a39..9fb52c8 100644
--- a/vswitchd/vswitch.xml
+++ b/vswitchd/vswitch.xml
@@ -2191,6 +2191,83 @@
       </column>
     </group>
 
+    <group title="PMD (Poll Mode Driver) Options">
+      <p>
+        Only PMD netdevs support these options.
+      </p>
+
+      <column name="options" key="n_rxq"
+              type='{"type": "integer", "minInteger": 1}'>
+        <p>
+          Specifies the maximum number of rx queues to be created for PMD
+          netdev.  If not specified or specified to 0, one rx queue will
+          be created by default.
+          Not supported by DPDK vHost interfaces.
+        </p>
+      </column>
+
+      <column name="other_config" key="pmd-rxq-affinity">
+        <p>Specifies mapping of RX queues of this interface to CPU cores.</p>
+        <p>Value should be set in the following form:</p>
+        <p>
+          <code>other_config:pmd-rxq-affinity=&lt;rxq-affinity-list&gt;</code>
+        </p>
+        <p>where</p>
+        <p>
+          <ul>
+            <li>
+              &lt;rxq-affinity-list&gt; ::= NULL | &lt;non-empty-list&gt;
+            </li>
+            <li>
+              &lt;non-empty-list&gt; ::= &lt;affinity-pair&gt; |
+                                  &lt;affinity-pair&gt; , &lt;non-empty-list&gt;
+            </li>
+            <li>
+              &lt;affinity-pair&gt; ::= &lt;queue-id&gt; : &lt;core-id&gt;
+            </li>
+          </ul>
+        </p>
+      </column>
+    </group>
+
+    <group title="MTU">
+      <p>
+        The MTU (maximum transmission unit) is the largest amount of data
+        that can fit into a single Ethernet frame.  The standard Ethernet
+        MTU is 1500 bytes.  Some physical media and many kinds of virtual
+        interfaces can be configured with higher MTUs.
+      </p>
+
+      <p>
+        A client may change a non-internal interface MTU by filling in
+        <ref column="mtu_request"/>.  Internal interfaces MTU, instead, is set
+        by Open vSwitch to the minimum of non-internal interfaces MTU in the
+        bridge. In any case, Open vSwitch then reports in <ref column="mtu"/>
+        the currently configured value.
+      </p>
+
+      <column name="mtu">
+        <p>
+          This column will be empty for an interface that does not
+          have an MTU as, for example, some kinds of tunnels do not.
+        </p>
+
+        <p>
+          Open vSwitch sets this column's value, so other clients should treat
+          it as read-only.
+        </p>
+      </column>
+
+      <column name="mtu_request"
+              type='{"type": "integer", "minInteger": 1}'>
+        <p>
+          Requested MTU (Maximum Transmission Unit) for the interface. A client
+          can fill this column to change the MTU of a non-internal interface.
+        </p>
+    </column>
+
+    </group>
+
     <group title="Interface Status">
       <p>
         Status information about interfaces attached to bridges, updated every
@@ -2233,20 +2310,6 @@
         </p>
       </column>
 
-      <column name="mtu">
-        <p>
-          The MTU (maximum transmission unit); i.e. the largest
-          amount of data that can fit into a single Ethernet frame.
-          The standard Ethernet MTU is 1500 bytes.  Some physical media
-          and many kinds of virtual interfaces can be configured with
-          higher MTUs.
-        </p>
-        <p>
-          This column will be empty for an interface that does not
-          have an MTU as, for example, some kinds of tunnels do not.
-        </p>
-      </column>
-
       <column name="lacp_current">
         Boolean value indicating LACP status for this interface.  If true, this
         interface has current LACP information about its LACP partner.  This
-- 
1.8.3.1

